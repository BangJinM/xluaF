require("framework.System")

local Context = CS.Loxodon.Framework.Contexts.Context
local SimpleCommand = CS.Loxodon.Framework.Commands.SimpleCommand

local ObservableObject = require("framework.ObservableObject")
local ObservableDictionary = require("framework.ObservableDictionary")
local InteractionRequest = require("framework.InteractionRequest")
local Executors = require("framework.Executors")
local AsyncTask = require("framework.AsyncTask")

---
--模块
--@module MessageBoxModel.lua
local M = class("MessageBoxModel", ObservableObject)

--[[--
构造函数
@param #table self
@param #table t 初始化参数
]]
function M:ctor(t)
    M.super.ctor(self, t)

    self.title = ""
    self.content = ""

    self.okCallBack = nil
    self.noCallBack = nil

    self.okFunc =
        SimpleCommand(
        function()
            self.okCallBack = function()
                print("ok")
            end
            if self.okCallBack then
                self.okCallBack()
            end
        end,
        true
    )
    self.noFunc =
        SimpleCommand(
        function()
            self.noCallBack = function()
                print("no")
            end
            if self.noCallBack then
                self.noCallBack()
            end
        end,
        true
    )
end
return M
