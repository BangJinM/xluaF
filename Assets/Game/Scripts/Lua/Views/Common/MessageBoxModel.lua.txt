require("framework.System")

local Context = CS.Loxodon.Framework.Contexts.Context
local SimpleCommand = CS.Loxodon.Framework.Commands.SimpleCommand

local ObservableObject = require("framework.ObservableObject")
local ObservableDictionary = require("framework.ObservableDictionary")
local InteractionRequest = require("framework.InteractionRequest")
local Executors = require("framework.Executors")
local AsyncTask = require("framework.AsyncTask")

---
--模块
--@module MessageBoxModel.lua
local M = class("MessageBoxModel", ObservableObject)
-- 按钮类型 btnType=1:"确定" =2:{"确定","取消"}
M.BTNTYPE = {
    TYPE_ONE_BTN = 1,
    TYPE_TWO_BTN = 2
}

--[[--
构造函数
@param #table self
@param #table t 初始化参数
]]
function M:ctor(t)
    M.super.ctor(self, t)

    self.title = self.title or ""
    self.content = self.content or ""
    self.btnType = M.BTNTYPE.TYPE_TWO_BTN or self.btnType
    self.okCallBack = self.okCallBack or nil
    self.noCallBack = self.noCallBack or nil

    self.dismissRequest = InteractionRequest(self)

    self.okFunc =
        SimpleCommand(
        function()
            if self.okCallBack then
                self.okCallBack()
            end
        end,
        true
    )
    self.noFunc =
        SimpleCommand(
        function()
            self.dismissRequest:Raise(nil)
            if self.noCallBack then
                self.noCallBack()
            end
        end,
        true
    )
end
return M
