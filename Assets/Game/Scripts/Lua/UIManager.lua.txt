require("framework.System")
local M = class("UIManager")

local WindowContainer = CS.Loxodon.Framework.Views.WindowContainer
local Context = CS.Loxodon.Framework.Contexts.Context

function M:ctor()
    -- 获得应用上下文，一个游戏建议创建应用上下文和玩家上下文。
    -- 全局的服务都放入应用上下文中，如账号服务，网络组件，配置服务等基础组件和服务
    -- 只与某个玩家相关的如背包服务、装备服务、角色服务都放入玩家上下文，当登出游戏可以统一释放
    local context = Context.GetApplicationContext()

    -- 从应用上下文获得一个视图定位器
    self.locator = context:GetService("IUIViewLocator")

    -- 创建一个名为MAIN的窗口容器
    self.winContainer = WindowContainer.Create("MAIN")

    self.windows = {}
end

--[[
    @desc: 加载窗口
    time:2021-07-05 10:54:12
    --@windowPath:
	--@viewModel: 
    @return:
]]
function M:LoadWindow(windowPath, viewModel)
    -- 通过视图定位器，加载一个启动窗口视图
    local window = self.locator:LoadWindow(self.winContainer, windowPath)
    if not window then
        print("LoadWindow Error !")
        return
    end
    if viewModel then
        window:SetDataContext(viewModel)
    end
    -- 创建窗口
    window:Create()
    -- 显示窗口，返回一个transition对象，窗口显示一般会有窗口动画，所以是一个持续过程的操作
    local transition = window:Show()
    -- 监听窗口显示完成事件
    transition:OnFinish(
        function()
            print("Open Finish !")
        end
    )
    self.windows[windowPath] = window
    return window
end

--[[
    @desc: 卸载窗口
    time:2021-07-05 10:54:47
    --@windowPath: 
    @return:
]]
function M:UnloadWindow(windowPath)
    if self.windows[windowPath] then
        self.windows[windowPath]:Dismiss()
        self.windows[windowPath] = nil
        return
    end
    print("Dispose Error !")
end

return M
