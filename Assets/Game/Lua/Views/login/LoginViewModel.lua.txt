require("framework.System")

local Context = CS.Loxodon.Framework.Contexts.Context
local SimpleCommand = CS.Loxodon.Framework.Commands.SimpleCommand

local ObservableObject = require("framework.ObservableObject")
local ObservableDictionary = require("framework.ObservableDictionary")
local InteractionRequest = require("framework.InteractionRequest")
local MessageBoxModel = require("Views.Common.MessageBoxModel")
local Executors = require("framework.Executors")
local AsyncTask = require("framework.AsyncTask")

---
--模块
--@module LoginViewModel
local M = class("LoginViewModel", ObservableObject)

--[[--
构造函数
@param #table self
@param #table t 初始化参数
]]
function M:ctor(t)
    M.super.ctor(self, t)

    self.password = ""
    self.account = ""

    self.openMessageBox = InteractionRequest(self)

    self.login =
        SimpleCommand(
        function()
            print("loginCommand")
        end,
        true
    )
    self.cancel =
        SimpleCommand(
        function()
            local mssageBoxModel = MessageBoxModel({title = "提示", content = "提示啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊~"})
            global.UIManager:LoadWindow(global.LayerList[global.LayerType.MESSAGEBOX], mssageBoxModel)
        end,
        true
    )
end
return M
